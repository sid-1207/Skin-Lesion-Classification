# -*- coding: utf-8 -*-
"""ML_Project_InceptionResNet_150epochs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GNX3AYEJZcLvdtTCsEw7ixNQQkKiIazr
"""

# Commented out IPython magic to ensure Python compatibility.
import os
from glob import glob
import cv2
import pandas as pd
import numpy as np
import keras
from sklearn.model_selection import train_test_split
from keras.utils.np_utils import to_categorical # convert to one-hot-encoding

from keras.preprocessing.image import ImageDataGenerator
from keras import layers
from keras import Model
from keras.applications.inception_resnet_v2 import InceptionResNetV2
from keras.applications.inception_v3 import InceptionV3, preprocess_input
from tensorflow.keras.optimizers import Adam
from keras.callbacks import ReduceLROnPlateau, EarlyStopping
from keras import backend as K

# %matplotlib inline
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

train_dir = "/content/drive/My Drive/ML/mlproject/train"

def load_unique():
    size_img = 256,256 
    images_for_plot = []
    labels_for_plot = []
    for folder in os.listdir(train_dir):
        for file in os.listdir(train_dir + '/' + folder):
            filepath = train_dir + '/' + folder + '/' + file
            image = cv2.imread(filepath)
            final_img = cv2.resize(image, size_img)
            final_img = cv2.cvtColor(final_img, cv2.COLOR_BGR2RGB)
            images_for_plot.append(final_img)
            labels_for_plot.append(folder)
            break
    return images_for_plot, labels_for_plot

images_for_plot, labels_for_plot = load_unique()
print("unique_labels = ", labels_for_plot)

with open('/content/drive/My Drive/ML/mlproject/images_processed_vaish.txt', 'r') as f:
    total_image = np.loadtxt(f)

total_image

labels_dict = {'Acne and Rosacea Photos':0, 'Actinic Keratosis Basal Cell Carcinoma and other Malignant Lesions':1, 
               'Bullous Disease Photos':2, 'Herpes HPV and other STDs Photos':3, 'Eczema Photos':4, 
               'Atopic Dermatitis Photos':5, 'Cellulitis Impetigo and other Bacterial Infections':6, 
               'Exanthems and Drug Eruptions':7, 'Hair Loss Photos Alopecia and other Hair Diseases':8, 
               'Light Diseases and Disorders of Pigmentation':9, 'Urticaria Hives':10,
               'Seborrheic Keratoses and other Benign Tumors':11, 'Lupus and other Connective Tissue diseases':12, 
               'Melanoma Skin Cancer Nevi and Moles':13, 'Scabies Lyme Disease and other Infestations and Bites':14, 
               'Systemic Disease':15, 'Nail Fungus and other Nail Disease':16, 
               'Tinea Ringworm Candidiasis and other Fungal Infections':17, 
               'Psoriasis pictures Lichen Planus and related diseases':18, 'Poison Ivy Photos and other Contact Dermatitis':19,
               'Vascular Tumors':20, 'Vasculitis Photos':21,
               'Warts Molluscum and other Viral Infections':22}

def load_data():
    images = []
    labels = []
    new_image = [0]*23
    size = 256,256
    folder_exist = 0
    print("LOADING DATA FROM : ",end = "")
    for folder in os.listdir(train_dir):
        #print()
        print(folder, end = ' | ')
        for image in os.listdir(train_dir + "/" + folder):
            new_image[labels_dict[folder]]+=1
            if new_image[labels_dict[folder]]>total_image[labels_dict[folder]] and total_image[labels_dict[folder]] < (len(os.listdir(train_dir + "/" + folder))/1.5):
              labels.append(labels_dict[folder]) 
              folder_exist = 1
              total_image[labels_dict[folder]]+=1
            if folder_exist == 1:
              folder_exist = 0 
              temp_img = cv2.imread(train_dir + '/' + folder + '/' + image)
              temp_img = cv2.resize(temp_img, size)
              images.append(temp_img)
            
    images = np.array(images)
    
    templabels = labels
    labels = keras.utils.np_utils.to_categorical(labels)
    X_train, X_test, Y_train, Y_test = train_test_split(images, labels, test_size = 0.01342281879)
    return X_train, Y_train, X_test, Y_test, templabels

X_train, Y_train,  X_test, Y_test, labels = load_data()

print('Loaded', len(X_test),'images for testing','Test data shape =',X_test.shape)

print('Loaded', len(X_train),'images for testing','Test data shape =',X_train.shape)

total_image

from keras.models import load_model

model = load_model('/content/drive/My Drive/ML/mlproject/model_vaish/complete_trained_model_100epoc.model')

train_datagen = ImageDataGenerator(rotation_range=60, width_shift_range=0.2, height_shift_range=0.2,
                                   shear_range=0.2, zoom_range=0.2, fill_mode='nearest')

train_datagen.fit(X_train)

val_datagen = ImageDataGenerator()
val_datagen.fit(X_test)

optimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=False)
model.compile(loss='categorical_crossentropy',
              optimizer=optimizer,
              metrics=['acc'])

batch_size = 32
epochs = 50
history = model.fit_generator(train_datagen.flow(X_train,Y_train, batch_size=batch_size),
                              epochs = epochs, validation_data = val_datagen.flow(X_test, Y_test),
                              verbose = 1, steps_per_epoch=(X_train.shape[0] // batch_size),
                              validation_steps=(X_test.shape[0] // batch_size),
                              )

model.save('/content/drive/My Drive/ML/mlproject/model_vaish/complete_trained_model_150epoc.h5')
model.save('/content/drive/My Drive/ML/mlproject/model_vaish/complete_trained_model_150epoc.model')

with open('/content/drive/My Drive/ML/mlproject/images_processed_vaish.txt', 'w') as f:
    np.savetxt(f, total_image)